library(mongolite)
mongo_db <- mongo(collection = "products", db = "off", url = "mongodb://127.0.0.1:27017",
verbose = FALSE, options = ssl_options())
mongo_db$count('{}')
test <- mongo_db$find(
query = '{"generic_name" : "Gateaux chocolat"}',
fields = '{"quantity":true, "brands":true, "generic_name":true,"proteins_100g":true, "glucose_100g":true, "main_category":true, "nutriments.carbohydrates_100g":true,
"nutriments.fat_100g":true, "nutriments.fiber_100g":true, "nutriments.proteins_100g":true, "nutriments.sodium_100g":true}',
limit = 35
)
test
print(mongo_db$count(query = '{"generic_name" : "Pain de mie complet"}'))
library(mongolite)
mongo_db <- mongo(collection = "products", db = "off", url = "mongodb://127.0.0.1:27017",
verbose = FALSE, options = ssl_options())
mongo_db <- mongo(collection = "products", db = "off", url = "mongodb://127.0.0.1:27017",
verbose = FALSE, options = ssl_options())
mongo_db$count('{}')
test <- mongo_db$find(
query = '{"generic_name" : "Gateaux chocolat"}',
fields = '{"quantity":true, "brands":true, "generic_name":true,"proteins_100g":true, "glucose_100g":true, "main_category":true, "nutriments.carbohydrates_100g":true,
"nutriments.fat_100g":true, "nutriments.fiber_100g":true, "nutriments.proteins_100g":true, "nutriments.sodium_100g":true}',
limit = 35
)
test
library(ggplot2)
install.packages("ggplot2")
library(dplyr)
col(test
)
colnames
names(test)
names(test$nutriments$fat_100g)
ggplot(test, aes(nutriments$fat_100g)) + geom_hist()
library(ggplot2)
ggplot(test, aes(nutriments$fat_100g)) + geom_hist()
ggplot(test, aes(nutriments$fat_100g)) + geom_bar()
test
test <- mongo_db$find(
query = '{"generic_name" : "Pain de mie complet"}',
fields = '{"quantity":true, "brands":true, "generic_name":true,"proteins_100g":true, "glucose_100g":true, "main_category":true, "nutriments.carbohydrates_100g":true,
"nutriments.fat_100g":true, "nutriments.fiber_100g":true, "nutriments.proteins_100g":true, "nutriments.sodium_100g":true}',
limit = 35
)
test
ggplot(test, aes(nutriments$fat_100g)) + geom_bar()
generic_name_unique <- mongo_db$distinct("generic_name")
generic_name_unique
generic_name_unique <- mongo_db$distinct("generic_name")
product_name_unique <- mongo_db$distinct("product_name")
len(generic_name_unique)
len(product_name_unique)
length
generic_name_unique
generic_name_unique
grepl("thé", generic_name_unique, ignore.case = TRUE)
generic_name_unique[grepl("thé", generic_name_unique, ignore.case = TRUE)]
generic_name_unique[grepl("thé vert", generic_name_unique, ignore.case = TRUE)]
generic_name_unique[grepl("pate", generic_name_unique, ignore.case = TRUE)]
test <- mongo_db$find(
query = '{"generic_name" : "pates"}',
fields = '{"quantity":true, "brands":true, "generic_name":true,"proteins_100g":true, "glucose_100g":true, "main_category":true, "nutriments.carbohydrates_100g":true,
"nutriments.fat_100g":true, "nutriments.fiber_100g":true, "nutriments.proteins_100g":true, "nutriments.sodium_100g":true}',
limit = 35
)
test
generic_name_unique[grepl("pâte", generic_name_unique, ignore.case = TRUE)]
test <- mongo_db$find(
query = '{"generic_name" : "Pâte alimentaire"}',
fields = '{"quantity":true, "brands":true, "generic_name":true,"proteins_100g":true, "glucose_100g":true, "main_category":true, "nutriments.carbohydrates_100g":true,
"nutriments.fat_100g":true, "nutriments.fiber_100g":true, "nutriments.proteins_100g":true, "nutriments.sodium_100g":true}',
limit = 35
)
test
generic_name_unique[grepl("pâte", generic_name_unique, ignore.case = TRUE)]
generic_name_unique[grepl("Pâte alimentaire", generic_name_unique, ignore.case = TRUE)]
generic_name_unique[grepl("Pâte alimentaire", generic_name_unique, ignore.case = TRUE)]
pates_generic_names <- generic_name_unique[grepl("Pâte alimentaire", generic_name_unique, ignore.case = TRUE)]
pates_generic_names
pates_generic_names <- generic_name_unique[grepl("Pâte alimentaire", generic_name_unique, ignore.case = TRUE)][c(1, 5)]
pates_generic_names
test <- mongo_db$find(
query = '{ "generic_name" :
{ "$in" : [ "Pâte alimentaire au blé dur de qualité supérieure",
"Pâte alimentaire"]  } }',
fields = '{"quantity":true, "brands":true, "generic_name":true,"proteins_100g":true, "glucose_100g":true, "main_category":true, "nutriments.carbohydrates_100g":true,
"nutriments.fat_100g":true, "nutriments.fiber_100g":true, "nutriments.proteins_100g":true, "nutriments.sodium_100g":true}',
limit = 35
)
test
generic_name_unique[grepl("Pâtes alimentaire", generic_name_unique, ignore.case = TRUE)]
generic_name_unique[grepl("Pâte alimentaire|Pâtes alimentaire", generic_name_unique, ignore.case = TRUE)]
test <- mongo_db$find(
query = '{ "generic_name" :
{ "$in" : [ "Pâte alimentaire au blé dur de qualité supérieure",
"Pâte alimentaire", "Pâtes alimentaires de blé dur"]  } }',
fields = '{"quantity":true, "brands":true, "generic_name":true,"proteins_100g":true, "glucose_100g":true, "main_category":true, "nutriments.carbohydrates_100g":true,
"nutriments.fat_100g":true, "nutriments.fiber_100g":true, "nutriments.proteins_100g":true, "nutriments.sodium_100g":true}',
limit = 35
)
test
generic_name_unique[grepl("Pâte alimentaire|Pâtes alimentaire", generic_name_unique, ignore.case = TRUE)]
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
library(dplyr)
#------------------------------
# I set the working directory.
#------------------------------
setwd("/home/thibault/Documents/oilprediction_challenge/")
#---------------------------------------------------------------
# The test and training set is used for the mapping generation.
#---------------------------------------------------------------
train <- read.csv("./Data/Train.csv", sep = ";",stringsAsFactors = FALSE)
test <- read.csv("./Data/Test.csv", sep = ";",stringsAsFactors = FALSE)
#--------------------------------
# We integrate the two datasets.
#--------------------------------
integrated <- rbind(train, test)
inegrated
integrated
library(dplyr)
#------------------------------
# I set the working directory.
#------------------------------
setwd("/home/thibault/Documents/oilprediction_challenge/")
#---------------------------------------------------------------
# Load train and test set
#---------------------------------------------------------------
train <- read.csv("./Data/Train.csv", sep = ";",stringsAsFactors = FALSE)
test <- read.csv("./Data/Test.csv", sep = ";",stringsAsFactors = FALSE)
#--------------------------------
# We combine the two datasets.
#--------------------------------
full_dataset <- rbind(train, test)
head(full_dataset)
